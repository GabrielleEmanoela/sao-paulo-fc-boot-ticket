const puppeteer = require('puppeteer');

// Fun칞칚o de delay personalizada
function delay(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
}

// Cores para o console
const colors = {
    reset: '\x1b[0m',
    red: '\x1b[31m',
    green: '\x1b[32m',
    yellow: '\x1b[33m',
    blue: '\x1b[34m',
    cyan: '\x1b[36m'
};

async function monitorSector() {
    // Configura칞칫es
    const url = 'https://cart.spfcticket.net/saopaulofcxcorinthians_25'; // Substitua pela URL real
    const targetSector = 'ARQUIBANCADA LESTE LACTA - Inteira'; // Setor desejado
    const maxAttempts = 999; // N칰mero m치ximo de tentativas de verifica칞칚o
    const interval = 5000; // Intervalo entre verifica칞칫es (30 segundos)

    const browser = await puppeteer.launch({
        headless: false, // Modo com interface gr치fica para monitoramento
        // args: ['--no-sandbox', '--disable-setuid-sandbox']
    });

    const page = await browser.newPage();

    for (let attempt = 1; attempt <= maxAttempts; attempt++) {
        try {
            console.log(`${colors.cyan}Tentativa ${attempt} de ${maxAttempts} - ${new Date().toLocaleString()}${colors.reset}`);

            // Navegar at칠 a p치gina
            await page.goto(url, { waitUntil: 'networkidle2' });
            console.log(`${colors.blue}P치gina acessada: ${url}${colors.reset}`);

            // Aceitar cookies (se necess치rio) - com verifica칞칚o mais robusta
            try {
                const cookieButton = await page.$('.cc-btn.cc-dismiss');
                if (cookieButton) {
                    const isVisible = await cookieButton.isIntersectingViewport();
                    if (isVisible) {
                        await cookieButton.click();
                        console.log(`${colors.yellow}Cookies aceitos${colors.reset}`);
                        await delay(1000); // Pequeno delay ap칩s aceitar cookies
                    }
                }
            } catch (cookieError) {
                console.log(`${colors.yellow}Banner de cookies n칚o encontrado ou j치 foi aceito${colors.reset}`);
            }

            // Esperar pelos itens de produto
            await page.waitForSelector('app-product-item[data-cy="product-item"]', { timeout: 10000 });
            console.log(`${colors.blue}Itens de produto carregados${colors.reset}`);

            // Obter todos os itens de produto
            const products = await page.$$('app-product-item[data-cy="product-item"]');

            let sectorFound = false;

            // Iterar sobre os itens para verificar o setor desejado
            for (const product of products) {
                const sectorName = await product.$eval(
                    'label[data-cy="product-name"]',
                    el => el.textContent.trim()
                );
                const isSoldOut = await product.$('.cart-product-group-item.sold-out');
                const price = await product.$eval(
                    'strong[data-cy="product-price"]',
                    el => el.textContent.trim()
                );

                if (sectorName === targetSector) {
                    sectorFound = true;
                    if (isSoldOut) {
                        console.log(`${colors.red}游댮 Setor ${targetSector} est치 ESGOTADO. Pre칞o: ${price}${colors.reset}`);
                    } else {
                        console.log(`${colors.green}游릭 Setor ${targetSector} est치 DISPON칈VEL! Pre칞o: ${price}${colors.reset}`);
                    }
                    break;
                }
            }

            if (!sectorFound) {
                console.log(`${colors.yellow}丘멆잺  Setor ${targetSector} n칚o encontrado na lista de produtos.${colors.reset}`);
            }

            // Aguardar antes da pr칩xima tentativa
            console.log(`${colors.cyan}Aguardando ${interval / 1000} segundos para a pr칩xima verifica칞칚o...${colors.reset}`);
            await delay(interval);
        } catch (error) {
            console.error(`${colors.red}Erro na tentativa ${attempt}: ${error.message}${colors.reset}`);
            if (attempt === maxAttempts) {
                console.log(`${colors.red}M치ximo de tentativas atingido. Encerrando.${colors.reset}`);
                await browser.close();
                return;
            }
            console.log(`${colors.yellow}Aguardando ${interval / 1000} segundos para tentar novamente...${colors.reset}`);
            await delay(interval);
        }
    }

    await browser.close();
    console.log(`${colors.blue}Navegador fechado.${colors.reset}`);
}

monitorSector();